"""
This script can be used to create a new experiment directory. It will
have a name of the form: <N>-<two>-<words> where <N> is the number of
experiments in the directory, and and "<two>-<words>" is a random name
or slug generated by the `coolname` package.
"""

import sys
from pathlib import Path

from coolname import generate_slug


def get_arguments() -> Path:
    """
    Get the `base_dir` from the command line arguments.
    """

    if len(sys.argv) == 1:
        base_dir = Path.cwd()

    elif len(sys.argv) == 2:

        # Check if we are asking for help
        if sys.argv[1] in ["-h", "--help"]:
            print("Usage: nex [base_dir]")
            sys.exit(0)

        # Otherwise, use the command line argument as the base directory
        base_dir = Path(sys.argv[1])
        if not base_dir.is_dir():
            print(f"The given base directory '{base_dir}' does not exist!")
            sys.exit(1)

    else:
        print("Too many command line arguments! See --help for usage.")
        sys.exit(1)

    return base_dir


def create_experiment_dir(base_dir: Path | None = None) -> None:
    """
    Function to create a new experiment directory in the given
    `base_dir` directory. If no `base_dir` is given, the function
    will try to get it from the command line arguments.
    This function can be used as an entry point for the `nex` command.
    """

    # Check if we got a base dir or if we need to get it from the command line
    if base_dir is None:
        base_dir = get_arguments()

    # Get the number of experiments in the directory
    n_experiments = len(list(filter(lambda x: x.is_dir(), base_dir.glob("*"))))

    # Generate a random name for the new experiment directory
    slug = generate_slug(2)
    name = f"{n_experiments + 1:03d}-{slug}"

    # Create the new experiment directory
    experiment_dir = base_dir / name
    experiment_dir.mkdir()

    # Print the path to the new experiment directory
    print("Created new experiment directory:", experiment_dir.resolve())
